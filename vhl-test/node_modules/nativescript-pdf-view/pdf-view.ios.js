"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pdf_view_common_1 = require("./pdf-view.common");
var PDFViewDelegate = (function (_super) {
    __extends(PDFViewDelegate, _super);
    function PDFViewDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PDFViewDelegate.initWithOwner = function (owner) {
        var delegate = PDFViewDelegate.new();
        delegate.owner = owner;
        return delegate;
    };
    PDFViewDelegate.prototype.webViewDidFinishNavigation = function (webView) {
        pdf_view_common_1.PDFViewCommon.notifyOfEvent(pdf_view_common_1.PDFViewCommon.loadEvent, this.owner);
    };
    return PDFViewDelegate;
}(NSObject));
PDFViewDelegate.ObjCProtocols = [WKNavigationDelegate];
var PDFView = (function (_super) {
    __extends(PDFView, _super);
    function PDFView() {
        var _this = _super.call(this) || this;
        _this.init();
        return _this;
    }
    Object.defineProperty(PDFView.prototype, "ios", {
        get: function () {
            return this.nativeView;
        },
        set: function (value) {
            this.nativeView = value;
        },
        enumerable: true,
        configurable: true
    });
    PDFView.prototype[pdf_view_common_1.srcProperty.setNative] = function (value) {
        this.loadPDF(value);
    };
    PDFView.prototype.onLoaded = function () {
        _super.prototype.onLoaded.call(this);
        this.ios.navigationDelegate = this.delegate;
    };
    PDFView.prototype.onUnloaded = function () {
        this.ios.navigationDelegate = void 0;
        _super.prototype.onUnloaded.call(this);
    };
    PDFView.prototype.loadPDF = function (src) {
        if (!src) {
            return;
        }
        var url;
        if (src.indexOf('://') === -1) {
            url = NSURL.fileURLWithPath(src);
            this.ios.loadFileURLAllowingReadAccessToURL(url, url);
        }
        else {
            url = NSURL.URLWithString(src);
            var urlRequest = NSURLRequest.requestWithURL(url);
            this.ios.loadRequest(urlRequest);
        }
    };
    PDFView.prototype.init = function () {
        this.delegate = PDFViewDelegate.initWithOwner(new WeakRef(this));
        this.ios = new WKWebView({
            configuration: WKWebViewConfiguration.new(),
            frame: this.mainScreen.bounds,
        });
        this.ios.opaque = false;
        this.ios.autoresizingMask =
            2 |
                16;
    };
    Object.defineProperty(PDFView.prototype, "mainScreen", {
        get: function () {
            return typeof UIScreen.mainScreen === 'function' ?
                UIScreen.mainScreen() :
                UIScreen.mainScreen;
        },
        enumerable: true,
        configurable: true
    });
    return PDFView;
}(pdf_view_common_1.PDFViewCommon));
exports.PDFView = PDFView;
//# sourceMappingURL=pdf-view.ios.js.map