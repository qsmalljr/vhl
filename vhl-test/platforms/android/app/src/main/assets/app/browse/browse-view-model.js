"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var calendarModule = require("nativescript-pro-ui/calendar");
var frameModule = require("tns-core-modules/ui/frame");
var color_1 = require("tns-core-modules/color");
var BrowseViewModel = /** @class */ (function (_super) {
    __extends(BrowseViewModel, _super);
    function BrowseViewModel() {
        var _this = _super.call(this) || this;
        //CALENDAR POPULATING STUFF
        var now = new Date();
        var startDate, endDate, event;
        var colors = [new color_1.Color(200, 188, 26, 214), new color_1.Color(220, 255, 109, 130), new color_1.Color(255, 55, 45, 255), new color_1.Color(199, 17, 227, 10), new color_1.Color(255, 255, 54, 3)];
        var events = new Array();
        for (var i = 1; i < 10; i++) {
            startDate = new Date(now.getFullYear(), now.getMonth(), 19);
            endDate = new Date(now.getFullYear(), now.getMonth(), 20);
            event = new calendarModule.CalendarEvent("event " + i, startDate, endDate, false, colors[i * 10 % (colors.length - 1)]);
            events.push(event);
            if (i % 3 == 0) {
                event = new calendarModule.CalendarEvent("second " + i, startDate, endDate, true, colors[i * 5 % (colors.length - 1)]);
                events.push(event);
            }
        }
        _this.source = events;
        return _this;
    }
    Object.defineProperty(BrowseViewModel.prototype, "source", {
        get: function () {
            return this.get("eventSource");
        },
        //MORE CALENDAR METHODS
        set: function (value) {
            this.set("eventSource", value);
        },
        enumerable: true,
        configurable: true
    });
    BrowseViewModel.prototype.onDateSelected = function (args) {
        var date = args.date;
        var calendar = frameModule.topmost().getViewById("calendar");
        var events = calendar.getEventsForDate(date);
        this.set("myItems", events);
    };
    BrowseViewModel.prototype.addEvent = function (eventData) {
        //this event gets fired properly
        console.log("WEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
    };
    BrowseViewModel.prototype.toggleDropdown = function (eventData) {
        this.set("showDetails", !this.get("showDetails"));
    };
    return BrowseViewModel;
}(observable_1.Observable));
exports.BrowseViewModel = BrowseViewModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3NlLXZpZXctbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJicm93c2Utdmlldy1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhDQUE2QztBQUM3Qyw2REFBZ0U7QUFFaEUsdURBQTBEO0FBQzFELGdEQUErQztBQUUvQztJQUFxQyxtQ0FBVTtJQUMzQztRQUFBLFlBQ0ksaUJBQU8sU0FvQlY7UUFsQkgsMkJBQTJCO1FBQzNCLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDZixJQUFJLFNBQWUsRUFDZixPQUFhLEVBQ2IsS0FBbUMsQ0FBQztRQUN4QyxJQUFJLE1BQU0sR0FBaUIsQ0FBQyxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLGFBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9LLElBQUksTUFBTSxHQUF3QyxJQUFJLEtBQUssRUFBZ0MsQ0FBQztRQUM1RixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzFCLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVELE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFELEtBQUssR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLEtBQUssR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2SCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7UUFDTCxDQUFDO1FBQ0QsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7O0lBQ3pCLENBQUM7SUFHRCxzQkFBSSxtQ0FBTTthQUlWO1lBQ0ksTUFBTSxDQUFzQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7UUFQSix1QkFBdUI7YUFDcEIsVUFBVyxLQUEwQztZQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQU1NLHdDQUFjLEdBQXJCLFVBQXNCLElBQStDO1FBQ2pFLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDM0IsSUFBSSxRQUFRLEdBQTJELFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckgsSUFBSSxNQUFNLEdBQXdDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUcsa0NBQVEsR0FBZixVQUFnQixTQUFTO1FBQ3hCLGdDQUFnQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLHdDQUFjLEdBQXJCLFVBQXNCLFNBQVM7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQyxBQWhERCxDQUFxQyx1QkFBVSxHQWdEOUM7QUFoRFksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IGNhbGVuZGFyTW9kdWxlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wcm8tdWkvY2FsZW5kYXJcIik7XG5pbXBvcnQgb2JzZXJ2YWJsZU1vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZVwiKTtcbmltcG9ydCBmcmFtZU1vZHVsZSA9IHJlcXVpcmUoXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ZyYW1lXCIpO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9jb2xvclwiO1xuXG5leHBvcnQgY2xhc3MgQnJvd3NlVmlld01vZGVsIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cdFx0XG5cdFx0Ly9DQUxFTkRBUiBQT1BVTEFUSU5HIFNUVUZGXG5cdFx0bGV0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBzdGFydERhdGU6IERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBEYXRlLFxuICAgICAgICAgICAgZXZlbnQ6IGNhbGVuZGFyTW9kdWxlLkNhbGVuZGFyRXZlbnQ7XG4gICAgICAgIGxldCBjb2xvcnM6IEFycmF5PENvbG9yPiA9IFtuZXcgQ29sb3IoMjAwLCAxODgsIDI2LCAyMTQpLCBuZXcgQ29sb3IoMjIwLCAyNTUsIDEwOSwgMTMwKSwgbmV3IENvbG9yKDI1NSwgNTUsIDQ1LCAyNTUpLCBuZXcgQ29sb3IoMTk5LCAxNywgMjI3LCAxMCksIG5ldyBDb2xvcigyNTUsIDI1NSwgNTQsIDMpXTtcbiAgICAgICAgbGV0IGV2ZW50czogQXJyYXk8Y2FsZW5kYXJNb2R1bGUuQ2FsZW5kYXJFdmVudD4gPSBuZXcgQXJyYXk8Y2FsZW5kYXJNb2R1bGUuQ2FsZW5kYXJFdmVudD4oKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgICAgICBzdGFydERhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDE5KTtcbiAgICAgICAgICAgIGVuZERhdGUgPSBuZXcgRGF0ZShub3cuZ2V0RnVsbFllYXIoKSwgbm93LmdldE1vbnRoKCksIDIwKTtcbiAgICAgICAgICAgIGV2ZW50ID0gbmV3IGNhbGVuZGFyTW9kdWxlLkNhbGVuZGFyRXZlbnQoXCJldmVudCBcIiArIGksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgZmFsc2UsIGNvbG9yc1tpICogMTAgJSAoY29sb3JzLmxlbmd0aCAtIDEpXSk7XG4gICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7XG4gICAgICAgICAgICBpZiAoaSAlIDMgPT0gMCkge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gbmV3IGNhbGVuZGFyTW9kdWxlLkNhbGVuZGFyRXZlbnQoXCJzZWNvbmQgXCIgKyBpLCBzdGFydERhdGUsIGVuZERhdGUsIHRydWUsIGNvbG9yc1tpICogNSAlIChjb2xvcnMubGVuZ3RoIC0gMSldKTtcbiAgICAgICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zb3VyY2UgPSBldmVudHM7XG4gICAgfVxuXG5cdC8vTU9SRSBDQUxFTkRBUiBNRVRIT0RTXG4gICAgc2V0IHNvdXJjZSh2YWx1ZTogQXJyYXk8Y2FsZW5kYXJNb2R1bGUuQ2FsZW5kYXJFdmVudD4pIHtcbiAgICAgICAgdGhpcy5zZXQoXCJldmVudFNvdXJjZVwiLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0IHNvdXJjZSgpOiBBcnJheTxjYWxlbmRhck1vZHVsZS5DYWxlbmRhckV2ZW50PiB7XG4gICAgICAgIHJldHVybiA8QXJyYXk8Y2FsZW5kYXJNb2R1bGUuQ2FsZW5kYXJFdmVudD4+dGhpcy5nZXQoXCJldmVudFNvdXJjZVwiKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25EYXRlU2VsZWN0ZWQoYXJnczogY2FsZW5kYXJNb2R1bGUuQ2FsZW5kYXJTZWxlY3Rpb25FdmVudERhdGEpIHtcbiAgICAgICAgdmFyIGRhdGU6IERhdGUgPSBhcmdzLmRhdGU7XG4gICAgICAgIHZhciBjYWxlbmRhcjogY2FsZW5kYXJNb2R1bGUuUmFkQ2FsZW5kYXIgPSA8Y2FsZW5kYXJNb2R1bGUuUmFkQ2FsZW5kYXI+ZnJhbWVNb2R1bGUudG9wbW9zdCgpLmdldFZpZXdCeUlkKFwiY2FsZW5kYXJcIik7XG4gICAgICAgIHZhciBldmVudHM6IEFycmF5PGNhbGVuZGFyTW9kdWxlLkNhbGVuZGFyRXZlbnQ+ID0gY2FsZW5kYXIuZ2V0RXZlbnRzRm9yRGF0ZShkYXRlKTtcbiAgICAgICAgdGhpcy5zZXQoXCJteUl0ZW1zXCIsIGV2ZW50cyk7XG4gICAgfVxuXHRcblx0cHVibGljIGFkZEV2ZW50KGV2ZW50RGF0YSkge1xuXHRcdC8vdGhpcyBldmVudCBnZXRzIGZpcmVkIHByb3Blcmx5XG5cdFx0Y29uc29sZS5sb2coXCJXRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRVwiKTtcblx0fVxuXHRcblx0cHVibGljIHRvZ2dsZURyb3Bkb3duKGV2ZW50RGF0YSl7XG5cdFx0dGhpcy5zZXQoXCJzaG93RGV0YWlsc1wiLCAhdGhpcy5nZXQoXCJzaG93RGV0YWlsc1wiKSk7XG5cdH1cbn1cblxuIl19